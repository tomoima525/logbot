apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'
apply plugin: 'com.novoda.bintray-release'
apply plugin: 'org.jetbrains.dokka'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokka}"
    }
}

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:recyclerview-v7:$versions.supportLibrary"
    implementation "com.android.support:appcompat-v7:$versions.supportLibrary"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "androidx.core:core-ktx:$versions.androidKtx"

    testImplementation "junit:junit:$versions.junit"
    androidTestImplementation "com.android.support.test:runner:$versions.testRunner"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$versions.espressoCore"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
repositories {
    mavenCentral()
}


// CheckStyle
task checkstyle(type:Checkstyle) {
    description 'Runs Checkstyle inspection against logbot sourcesets.'
    group = 'Code Quality'
    configFile rootProject.file('checkstyle.xml')
    ignoreFailures = false
    showViolations true
    classpath = files()
    source 'src/main/java'
}

// source jar (optional)
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}


task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

//TODO:fix javadoc error
tasks.withType(Javadoc) {
    enabled = false
}

publish {
    userOrg = user
    groupId  = groupIdName
    artifactId = 'logbot'
    bintrayUser = bintrayUserProperty
    bintrayKey = bintrayApiKeyProperty
    publishVersion = library_version
    desc = 'View logs on top of your application'
    website = siteUrl
    licences = ['Apache-2.0']
}

// Publish Artifacts with Maven plugin
publishing {
    publications {
        maven(MavenPublication) {
            groupId "$groupIdName"
            artifactId 'logbot'
            version "$library_version"
            artifact("$buildDir/outputs/aar/$artifactId-release.aar")
            artifact(androidSourcesJar)
            artifact(javadocJar)

            // Add exclude and transitive options
            //https://gist.github.com/Robyer/a6578e60127418b380ca133a1291f017
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // List all compile dependencies and write to POM
                configurations.implementation.getAllDependencies().each { Dependency dep ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)

                    if (!dep.transitive) {
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {
            if (project.hasProperty("remote")
                    && project.getProperty("remote") == "true") {
                // Currently, maven-publish plugin only supports sftp
                // https://discuss.gradle.org/t/support-ssh-protocol-for-maven-publish-just-like-maven/17892
                url = deployUrl
                credentials {
                    username deployRepoUsername
                    password deployRepoPassword
                }
            } else {
                url "$rootDir/repo"
            }
        }
    }
}